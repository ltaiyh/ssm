1、整合spring和mybatis——sm
（1）spring-mybatis.xml配置文件

2、整合springmvc和sm——ssm
（1）springMVC.xml配置文件
（2）web.xml配置文件

3、数据库连接密码加密
方式一：改写PropertyPlaceholderConfigurer，加载配置文件时进行解密
方式二：改写BasicDataSource，连接数据库时进行解密

4、多数据源的配置
（1）配置多个数据源以及动态数据源
（2）继承AbstractRoutingDataSource，覆写determineCurrentLookupKey方法
（3）手动切换：DBContextHolder.setDBType(DBContextHolder.DATA_SOURCE_SLAVE);
（4）基于AOP自动切换：
a、定义一个切面Aspect，标识注解@Component、@Aspect、@Order(1)
b、通过@Before("execution(* cn.lt.service.*.*(..)))")标识进行切面的方法以及切面的处理
c、配置<aop:aspectj-autoproxy />，实现自动代理，同时配置基于AOP的事务

5、mybatis二级缓存
（1）第三方Ehcache
在Mapper.xml文件中配置<cache type="org.mybatis.caches.ehcache.EhcacheCache" />
ehcache.xml可以不用写
（2）自定义二级缓存
实现Cache接口
底层缓存数据是基于HashMap实现的
（CacheManager--Cache--Element（缓存对象））
id：cn.lt.mapper.StuScoreMapper（接口的全类名）————Cache的唯一标识
Key的生成采取规则：[hashcode : checksum : mappedStementId : offset : limit : executeSql : queryParams]  ————Element的key，即缓存对象的key
-891227904:2155469778:cn.lt.mapper.StuScoreMapper.queryScoreByName:0:2147483647:select * from stu_score where name = ?:李四	  
ReentrantReadWriteLock：
a、创建：fair（按照时间顺序获取锁）和unfair
b、类型：readLock（多线程）和writeLock（单线程）
（3）redis实现二级缓存
实现Cache接口
存储是Map，key-value键值对
Redis支持数据的持久化，可以将内存中的数据保持在磁盘中，重启的时候可以再次加载进行使用
a、性能极高 – Redis能读的速度是110000次/s,写的速度是81000次/s 。
b、丰富的数据类型 – Redis支持二进制案例的 Strings, Lists, Hashes, Sets 及 Ordered Sets 数据类型操作。
c、原子 – Redis的所有操作都是原子性的，同时Redis还支持对几个操作全并后的原子性执行。
d、丰富的特性 – Redis还支持 publish/subscribe, 通知, key 过期等等特性

6、





