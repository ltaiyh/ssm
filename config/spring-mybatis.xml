<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://www.springframework.org/schema/tx
		http://www.springframework.org/schema/tx/spring-tx-3.2.xsd">
		
	<!-- 注解扫描 -->	
	<context:component-scan base-package="cn.lt.service">
    </context:component-scan>
		
	<!-- 1、加载数据库配置文件 
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"
	-->
	<bean class="cn.lt.util.MyPropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:jdbc.properties</value>
                <value>classpath:redis.properties</value>
            </list>
        </property>
    </bean>
    
	<!-- 2、配置数据源 class="org.springframework.jdbc.datasource.DriverManagerDataSource"
		class="org.apache.commons.dbcp.BasicDataSource"
	-->	
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName" value="${jdbc.driver}"/>
		<property name="url" value="${jdbc.url.master}"/>
		<property name="username" value="${jdbc.username}"/>
		<property name="password" value="${jdbc.password}"/>
	</bean>	
		
	<!-- 3、配置sqlSessionFactory -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="typeAliasesPackage" value="cn.lt.model" />
		<!-- 接口和xml不在同一个包下时，需要指定xml的位置 -->
		<property name="mapperLocations" value="classpath:cn/lt/xml/*.xml" />
		<!-- <property name="configLocation" value="classpath:mybatis.xml" /> -->
	</bean>
	
	<!-- 4、 -->
	<!-- 方式一  接口不需要实现类，自动生成代理类，直接在service层使用-->
	<!-- <bean class="org.mybatis.spring.mapper.MapperFactoryBean">
	  <property name="mapperInterface" value="cn.lt.mapper.UserMapper" />
	  <property name="sqlSessionFactory" ref="sqlSessionFactory" />
	</bean> -->
	<!-- 推荐方式：方式二（方式三的简化版） 接口实现类中依赖注入sqlSession，
		@Repository自动扫描接口实现类并注册为spring的bean供Service使用-->
	<!-- <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
	  <constructor-arg index="0" ref="sqlSessionFactory" />
	</bean> -->
	<!-- 方式三 接口实现类中用set方法设置sqlSession，手动注册接口实现类为spring的bean供Service使用 -->
	<!-- <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
	  <constructor-arg index="0" ref="sqlSessionFactory" />
	</bean>
	<bean class="cn.lt.mapper.impl.UserMapperImpl">
	  <property name="sqlSession" ref="sqlSession" />
	</bean> -->
	<!-- 方式四 接口实现类继承SqlSessionDaoSupport，手动注册接口实现类为spring的bean供Service使用-->
	<!-- <bean class="cn.lt.mapper.impl.UserMapperImpl">
	  <property name="sqlSessionFactory" ref="sqlSessionFactory" />
	</bean> -->
	<!-- 推荐方式：方式五（方式一的简化版） 接口不需要实现类，自动生成代理类，直接在service层使用，不需要手动配置所有的接口-->	
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- 接口所在的基础包 -->
		<property name="basePackage" value="cn.lt.mapper" />
		<!-- <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" /> -->
	</bean>
	
	<!-- 5、配置事务管理器 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
		
	<!-- 6、使用声明式事务 -->
	<tx:annotation-driven transaction-manager="transactionManager"/>
	
	<!-- 6.1、定义事务通知 -->    
    <!-- <tx:advice id="txAdvice" transaction-manager="transactionManager">    
        定义方法的过滤规则    
        <tx:attributes>    
            所有方法都使用事务    
            <tx:method name="*" propagation="REQUIRED"/>    
            定义所有get开头的方法都是只读的    
            <tx:method name="get*" read-only="true"/>    
        </tx:attributes>    
    </tx:advice>  -->   
        
    <!-- 6.2、定义AOP配置 -->    
    <!-- <aop:config>    
        定义一个切入点    
        <aop:pointcut expression="execution (* cn.lt.service.*.*(..))" id="services"/>    
        对切入点和事务的通知，进行适配    
        <aop:advisor advice-ref="txAdvice" pointcut-ref="services"/>    
    </aop:config> -->  
	
	
	<!-- 引入其他文件 -->
	<import resource="redis.xml" />
	
</beans>